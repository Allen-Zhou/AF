<#@ Include File="TelChinaTemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Assembly Name="Microsoft.VisualStudio.ArchitectureTools.Extensibility, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Include File="TelChinaCSharpCommentHelpers.t4" #>
<#@ Include File="TelChinaCSharpHelpers.t4" #>
<#@ Output Extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<# 
	//System.Diagnostics.Debugger.Launch(); 
    //using集合
	WriteUsingStatements(this.Element,"DTO");
    WriteLine("");
	string classNamespace =this.Element.Namespace.ToString();
	classNamespace=GetNamespace(this.Element.Namespace);
    if(!string.IsNullOrEmpty(classNamespace))
    {
#>
namespace <#= classNamespace #>
{
<#   
		 PushIndent("\t");
    }	
	//类的注释
	WriteSummaryComment(this.Element.Description);    	
#>
<#
	//特性类
    WriteClassClrAttributesForDTO();
	//WriteTelChinaClassClrAttributes(this.Element);
#>
public partial class <#= ClassifierName(this.Element) #>DTO<#= ImplementedAndInheritedList(this.Element) #>
{
<#
    PushIndent("\t");

    // Write Attributes
    var ownedAttributes = this.Element.OwnedAttributes;
	//实体基类属性
	//WriteEntityBaseAttribute();
    foreach(IProperty attribute in ownedAttributes)
    {
		//注释
        WriteSummaryComment(attribute.Description);
		//属性
		string isNonempty = GetTelChinaProperty(attribute,"EntityBaseProperty","IsNonempty");
		
		string newType = ElementType(attribute,IsEnumerable(attribute));
		bool isEmpty =false;
		if(isNonempty.ToLower()=="true" && newType.ToLower()!="string")
		{
			isEmpty = true;
		}
        WriteDTOAttribute(newType,attribute.Name,isEmpty);	
        WriteLine("");
    }

	//关系
	 // Write 关联关系Associations    
	foreach(IDependency dependency in this.Element.GetRelatedLinks<IDependency>()) 
	{
		if(dependency.Client ==this.Element)
		{
			WriteDependencyPropertyForTelChina(dependency);
		}
	}	
	
	// Write 组合，聚合关系Associations    
	foreach(IAssociation association in this.Element.GetRelatedLinks<IAssociation>()) 
	{
		IEnumerable<IProperty> navigableEnds = association.MemberEnds;//association.NavigableOwnedEnds;
		foreach (IProperty ownedEnd in navigableEnds)
		{
			if ((!StringComparer.OrdinalIgnoreCase.Equals(ownedEnd.Type.QualifiedName, this.Element.QualifiedName)
				||association.SourceElement == association.TargetElement)
				&&!IsMemberEndProcessedAsAttribute(ownedEnd, ownedAttributes))
			{				
				if(ownedEnd.Opposite.Aggregation ==Microsoft.VisualStudio.Uml.Classes.AggregationKind.None)
				{
					//生成关联实体
					WriteClassOneAssociationsForMapping(ownedEnd);
				}
				else
				{
					//生成集合
					WriteClassManyAssociationsForMapping(ownedEnd);					
				}
			}
		}	
		
	}
	
	PopIndent();
	
#>
}
<#
    ClearIndent();
    if(!string.IsNullOrEmpty(classNamespace))
    {
#>
}
<#  } #>


<#+   
	#region Inheritance

    /// <summary>
    /// Gets the implemented and inherited types of the given class.
    /// </summary>
    /// <param name="aClass">The given class</param>
    /// <returns>implementedAndInherted types</returns>
    private static string ImplementedAndInheritedList(IClass aClass)
    {
		var list = ImplementedAndInheritedTypes(aClass);
        if(list.Any())
        {
            return " : " + string.Join(", ", list.Select(t => ElementType(t)));
        }
        else
        {			
            return " : DTOBase";
        }        
    }
	///<summary>
	/// 特性类
    /// </summary>
	private void WriteClassClrAttributesForDTO()
	{    
		WriteLine("[DataContract]");
		WriteLine("[Serializable]");
	}
	
	/// <summary>
    /// Gets the partial option.
    /// </summary>
    /// <param name="aClass">The class</param>
    /// <returns>The partial keyword option</returns>
    private static string ClassPartialOption(IClass aClass) 
    {
        return "partial ";//GetProperty(aClass, "class", "IsPartial", "partial");
    }
    #endregion Inheritance	    
	
	#region Opertion
	
	/// <summary>
	/// 基类属性
	/// </summary>
	private void WriteEntityBaseAttribute()
	{
		//ID
		WriteSummaryComment("ID");
		WriteDTOAttribute("Guid","ID",false);
		//CreatedOn
		WriteSummaryComment("创建时间");
		WriteDTOAttribute("DateTime","CreatedOn",false);
		//CreatedBy
		WriteSummaryComment("创建人");
		WriteDTOAttribute("string","CreatedBy",false);
		//UpdatedOn
		WriteSummaryComment("最近一次更新时间");
		WriteDTOAttribute("DateTime","UpdatedOn",false);
		//UpdatedBy
		WriteSummaryComment("最近一次更新人");
		WriteDTOAttribute("string","UpdatedBy",false);
		//SysVersion
		WriteSummaryComment("版本号");
		WriteDTOAttribute("int","SysVersion",false);
	}
	/// <summary>
	/// 返回DTO属性
	/// </summary>
	/// <param name="type">类型</param>
	/// <param name="name">名称</param>
	private void WriteDTOAttribute(string type,string name,bool isEmpty)
	{		 
		WriteLine("[DataMember]");	
		string outPut ="public "+ type;
		if(isEmpty)
		{
			outPut+="?";
		}
		outPut +=" "+ name;
        WriteLine(outPut);	
        WriteLine("{");	
		PushIndent("\t");
        WriteLine("get;");	
        WriteLine("set;");	
		PopIndent();
        WriteLine("}");	
	}
	
	
	/// <summary>
	/// 关联关系
	/// </summary>
	/// <param name="dependency"></param>
	private void WriteDependencyPropertyForTelChina(IDependency dependency)
	{
		//类名称
		string typeName = GetNamespace((dependency.Supplier).Namespace)+"." + dependency.Supplier.Name+"DTO";
		//属性名称
		string propertyName = dependency.Name;
		
		WriteClassAssociationsForDTO(typeName,propertyName,dependency.Description);
	}
	
	/// <summary>
    /// 组合关系1的一方
    /// </summary>
    /// <param name="property"></param>
	private void WriteClassOneAssociationsForMapping(IProperty property)
	{
		//类名称
		string typeName = GetNamespace((property.Type).Namespace)+"." + property.Type.Name +"DTO";
		//属性名称
		string propertyName = property.Name;
		
		WriteClassAssociationsForDTO(typeName,propertyName,property.Type.Description);
	}
	
	/// <summary>
	/// 输出关系
	/// </summary>
	/// <param name="typeName">类名称</param>
	/// <param name="name">属性名称</param>
	/// <param name="description">描述</param>
	private void WriteClassAssociationsForDTO(string typeName,string name,string description)
	{
		//id
		string idName = "id"+ name;	
		string iddescription =string.Empty;
		if(!string.IsNullOrEmpty(description))
		{
			iddescription =description+"的ID";
		}
		WriteSummaryComment(iddescription);
		WriteDTOAttribute("Guid",idName,false);
		WriteSummaryComment(description);
		WriteDTOAttribute(typeName,name,false);
	}
	
	/// <summary>
    /// 组合关系N的一方
    /// </summary>
    /// <param name="property"></param>
	private void WriteClassManyAssociationsForMapping(IProperty property)
	{
		bool isList = IsEnumerable(property);
		if(!isList)
		{
			//生成关联实体
			WriteClassOneAssociationsForMapping(property);
			return;
		}
		
		//属性名称
		string propertyName = property.Name + "s";
		//类名称
		string typeName ="IList<"+ GetNamespace((property.Type).Namespace)+"." + property.Type.Name +"DTO>";		
		
		WriteSummaryComment(property.Type.Description);
		
		WriteDTOAttribute(typeName,propertyName,false);
	}
	
	#endregion Opertion
	
	private void WriteTelChinaClassClrAttributes(IClass element)
    {
		bool isDTO = false;
		//是否为DTO
		string isClassDTO = GetTelChinaProperty(this.Element, "DTOBase", "IsDTO");
		if(!string.IsNullOrEmpty(isClassDTO)&&isClassDTO=="true")
		{
			isDTO =true;
		}
		if(!isDTO)
		{			
	        string classNamespace =GetNamespace(this.Element.Namespace);
			string assemblyName =string.Empty;
			//模版路径
			string projectPath = this.Element.GetModelStore().Root.GetStereotypeProperty("TextTemplateBindings","TextTemplateBindings","ProjectPath");
			var paths = projectPath.Split('|');
			foreach(string path in paths)
			{
				if(path.Contains("TelChinaClassTemplate"))
				{
					var projects =path.Split(new char[1]{'\\'});
					foreach(string project in projects)
					{
						if(project.Contains(".csproj"))
						{
							assemblyName =project.Replace(".csproj","");
						}
					}
				}
			}
			if(string.IsNullOrEmpty(assemblyName))
			{
				assemblyName =classNamespace;
			}
			string className =classNamespace+"."+ClassifierName(this.Element);
			
			WriteLine("[DataContract]");
			WriteLine("[DataContractTrsolverArrtibute(TypeAssemly=\""+ assemblyName +"\",TypeFullName=\""+className+"\")]");
		}
    }
   
#>
<#+
    protected override bool AppliesToElement()
    {	
		
        bool isTemplate = this.Element.IsTemplate;
        bool isBoundElement = this.Element.TemplateBindings != null && this.Element.TemplateBindings.Any();
        return !isTemplate && !isBoundElement && GetStereotype(this.Element) == "class";
    }
#>
